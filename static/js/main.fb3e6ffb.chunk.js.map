{"version":3,"sources":["utils/index.js","constants/index.js","components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","App.js","reportWebVitals.js","index.js"],"names":["getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","fields","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","map","row","column","Button","status","onStart","onStop","onRestart","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","timer","unsubscribe","clearInterval","App","useState","setFields","body","setBody","setStatus","direction","setDirection","setDifficulty","tick","setTick","useEffect","setInterval","handleMoving","onChangeDirection","useCallback","newDirection","difficult","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","delta","newPosition","position","isCollision","isEatingMyself","nextFields","field","newBody","removingTrack","pop","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kNAAaA,EAAkB,SAACC,EAAWC,GACvC,IADqD,IAAD,aAEhD,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAY,EAAI,IAAM,EACtDM,EAAIH,KAAKC,MAAMD,KAAKE,UAAYL,EAAY,EAAI,IAAM,EAI5D,IAFiBC,EAASM,MAAK,SAAAC,GAAI,OAAIA,EAAKN,IAAMA,GAAKM,EAAKF,IAAMA,KAG9D,MAAM,CAAN,EAAO,CAAEJ,IAAGI,SAPP,CAAC,IAAD,0CAaJG,EAAa,SAACT,EAAWU,GAElC,IADA,IAAMC,EAAS,GACNC,EAAI,EAAGA,EAAIZ,EAAWY,IAAK,CAChC,IAAMC,EAAO,IAAIC,MAAMd,GAAWe,KAAK,IACvCJ,EAAOK,KAAKH,GAGhBF,EAAOD,EAAMR,GAAGQ,EAAMJ,GAAK,QAW3B,IAAMW,EAAOlB,EAAgBC,EAAW,CAACU,IAGzC,OAFAC,EAAOM,EAAKX,GAAGW,EAAKf,GAAK,OAElBS,GChCEO,EAAkB,CAAEhB,EAAG,GAAII,EAAG,IAC9Ba,EAAgBV,EAFJ,GAE0BS,GAItCE,EAAa,CAAC,IAAM,IAAK,IAAK,GAAI,IAGlCC,EAAaC,OAAOC,OAAO,CACpCC,KAAM,OACNC,QAAS,UACTC,UAAW,YACXC,SAAU,aAIDC,EAAYN,OAAOC,OAAO,CACnCM,GAAI,KACJC,MAAO,QACPC,KAAM,OACNC,KAAM,SAIGC,EAAsBX,OAAOC,OAAO,CAC7CW,GAAIN,EAAUG,KACdI,GAAIP,EAAUC,GACdO,GAAIR,EAAUE,MACdO,GAAIT,EAAUI,OAILM,EAAoBhB,OAAOC,OAAO,CAC3CM,GAAID,EAAUI,KACdF,MAAOF,EAAUG,KACjBA,KAAMH,EAAUE,MAChBE,KAAMJ,EAAUC,KAIPU,EAAQjB,OAAOC,OAAO,CAC/BM,GAAI,CAAE3B,EAAG,EAAGI,GAAI,GAChBwB,MAAO,CAAE5B,EAAG,EAAGI,EAAG,GAClByB,KAAM,CAAE7B,GAAI,EAAGI,EAAG,GAClB0B,KAAM,CAAE9B,EAAG,EAAGI,EAAG,K,OCXNkC,EAlCI,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,OAAiE,IAAzDC,kBAAyD,MDItD,ECJsD,EAAzBC,EAAyB,EAAzBA,mBACpDC,EAAeF,EAAatB,EAAWqB,OAAS,GAAK,YACrDI,EAAiBH,EAAa,EAAI,GAAK,YAI7C,OACI,sBAAKI,UAAU,aAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,sBAAMA,UAAU,mBAAhB,sBACA,qBAAKA,UAAU,mCAAf,SACI,qBAAKA,UAAU,YAAf,SAA4BL,SAGpC,sBAAKK,UAAU,kBAAf,UACI,sBAAMA,UAAU,mBAAhB,0BACA,sBAAKA,UAAU,mCAAf,UACI,sBAAMA,UAAU,YAAhB,SAA6BJ,IAC7B,sBAAKI,UAAU,8BAAf,UACI,qBACIA,UAAS,0CAAqCF,GAC9CG,QAlBD,kBAAMJ,EAAmBD,EAAa,MAoBzC,qBACII,UAAS,4CAAuCD,GAChDE,QArBC,kBAAMJ,EAAmBD,EAAa,mBCQpDM,EAdD,SAAC,GAAgB,IAAdrC,EAAa,EAAbA,OACb,OACI,qBAAKmC,UAAU,QAAf,SAEQnC,EAAOsC,KAAI,SAACC,GACR,OAAOA,EAAID,KAAI,SAACE,GACZ,OAAO,qBAAKL,UAAS,eAAUK,cCOxCC,EAXA,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACvC,OACI,sBAAKV,UAAU,SAAf,UACKO,IAAWhC,EAAWM,UAAY,wBAAQmB,UAAU,mBAAmBC,QAASS,EAA9C,sBAClCH,IAAWhC,EAAWG,MAAQ,wBAAQsB,UAAU,eAAeC,QAASO,EAA1C,mBAC9BD,IAAWhC,EAAWK,WAAa,wBAAQoB,UAAU,oBAAoBC,QAASO,EAA/C,mBACnCD,IAAWhC,EAAWI,SAAW,wBAAQqB,UAAU,kBAAkBC,QAASQ,EAA7C,sB,cC4B/BE,EA3BW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAOzB,OACI,sBAAKZ,UAAU,qBAAf,UACI,wBAAQA,UAAU,gCAAgCC,QAL3C,kBAAMW,EAAS9B,EAAUG,OAKhC,SACI,cAAC,IAAD,CAAiB4B,KAAMC,QAE3B,gCACI,wBAAQd,UAAU,8BAA8BC,QAX/C,kBAAMW,EAAS9B,EAAUC,KAW1B,SACI,cAAC,IAAD,CAAiB8B,KAAME,QAE3B,wBAAQf,UAAU,gCAAgCC,QAX/C,kBAAMW,EAAS9B,EAAUI,OAW5B,SACI,cAAC,IAAD,CAAiB2B,KAAMG,WAG/B,wBAAQhB,UAAU,iCAAiCC,QAjB3C,kBAAMW,EAAS9B,EAAUE,QAiBjC,SACI,cAAC,IAAD,CAAiB6B,KAAMI,YCTnCC,EAAQ,KAENC,EAAc,WACbD,GAGLE,cAAcF,IA2LDG,MArKf,WAAgB,IAAD,EACeC,mBAASjD,GADxB,mBACNR,EADM,KACE0D,EADF,OAEWD,mBAAS,CAAClD,IAFrB,mBAENoD,EAFM,KAEAC,EAFA,OAOeH,mBAAS/C,EAAWG,MAPnC,mBAON6B,EAPM,KAOEmB,EAPF,OAQqBJ,mBAASxC,EAAUC,IARxC,mBAQN4C,EARM,KAQKC,EARL,OASuBN,mBLpDL,GK2ClB,mBASN1B,EATM,KASMiC,EATN,OAUWP,mBAAS,GAVpB,mBAUNQ,EAVM,KAUAC,EAVA,KAYbC,qBAAU,WAGR,GAAIzB,IAAWhC,EAAWG,KAe1B,OATAwC,EAAQe,aAAY,WAKlBF,GAAQ,SAAAD,GAAI,OAAIA,EAAO,OANRxD,EAAWsB,EAAa,IAUlCuB,IACN,CAACvB,EAAYW,IAEhByB,qBAAU,WAEJzB,IAAWhC,EAAWI,UAINuD,MAElBf,IACAO,EAAUnD,EAAWM,cAEtB,CAACiD,IAEJ,IAeMK,EAAoBC,uBAAY,SAACC,GAErC,GAAI9B,IAAWhC,EAAWI,QACxB,OAAOgD,EAGLnC,EAAkBmC,KAAeU,GAGrCT,EAAaS,KACZ,CAACV,EAAWpB,IAGTV,EAAqBuC,uBAAY,SAACE,GAGlC/B,IAAWhC,EAAWG,OAGtB4D,EAAY,GAAKA,EAAYhE,EAAWqB,QAG5CkC,EAAcS,MACb,CAAC/B,IAEJyB,qBAAU,WACR,IAAMO,EAAgB,SAACC,GACrB,IAAMH,EAAelD,EAAoBqD,EAAEC,SACtCJ,GAGLF,EAAkBE,IAGpB,OADAK,SAASC,iBAAiB,UAAWJ,GAC9B,kBAAMG,SAASE,oBAAoB,UAAWL,MACpD,CAACJ,IAGJ,IAAMD,EAAe,WAAO,IAAD,EACRV,EAAK,GAAdpE,EADiB,EACjBA,EAAGI,EADc,EACdA,EACLqF,EAAQpD,EAAMkC,GACdmB,EAAc,CAClB1F,EAAGA,EAAIyF,EAAMzF,EACbI,EAAGA,EAAIqF,EAAMrF,GAIf,GA9HgB,SAACN,EAAW6F,GAC9B,OAAIA,EAASvF,EAAI,GAAKuF,EAAS3F,EAAI,GAI/B2F,EAASvF,EAAIN,EAAY,GAAK6F,EAAS3F,EAAIF,EAAY,EAyHrD8F,CAAYnF,EAAO8B,OAAQmD,IAjHZ,SAACjF,EAAQkF,GAC9B,MAA0C,UAAnClF,EAAOkF,EAASvF,GAAGuF,EAAS3F,GAiH5B6F,CAAepF,EAAQiF,GAC1B,OAAO,EAIT,IAAMI,EAAarF,EAAOsC,KAAI,SAAAgD,GAAK,mBAAQA,MAErCC,EAAO,YAAO5B,GAEpB,GAA6C,SAAzC3D,EAAOiF,EAAYtF,GAAGsF,EAAY1F,GAAe,CAEnD,IAAMiG,EAAgBD,EAAQE,MAC9BJ,EAAWG,EAAc7F,GAAG6F,EAAcjG,GAAK,OAC1C,CAEL,IAAMe,EAAOlB,EAAgBY,EAAO8B,OAAR,sBAAoByD,GAApB,CAA6BN,KACzDI,EAAW/E,EAAKX,GAAGW,EAAKf,GAAK,OAS/B,OAPA8F,EAAWJ,EAAYtF,GAAGsF,EAAY1F,GAAK,QAC3CgG,EAAQG,QAAQT,GAGhBrB,EAAQ2B,GAER7B,EAAU2B,IACH,GAGT,OACE,sBAAKlD,UAAU,MAAf,UACE,yBAAQA,UAAU,SAAlB,UACE,qBAAKA,UAAU,kBAAf,SACE,oBAAIA,UAAU,QAAd,0BAEF,cAAC,EAAD,CACEL,OAAQ6B,EAAK7B,OACbC,WAAYA,EACZC,mBAAoBA,OAGxB,sBAAMG,UAAU,OAAhB,SACE,cAAC,EAAD,CAAOnC,OAAQA,MAEjB,yBAAQmC,UAAU,SAAlB,UACE,cAAC,EAAD,CACEO,OAAQA,EACRE,OA3GO,kBAAMiB,EAAUnD,EAAWK,YA4GlC4B,QA9GQ,kBAAMkB,EAAUnD,EAAWI,UA+GnC+B,UA3GU,WAChBQ,EAAQe,aAAY,WAClBF,GAAQ,SAAAD,GAAI,OAAIA,EAAO,OLhGE,KKkG3BF,EAAa9C,EAAUC,IACvB2C,EAAUnD,EAAWG,MACrB+C,EAAQ,CAACrD,IACTmD,EAAU5D,ELxGW,GKwGWS,OAsG5B,cAAC,EAAD,CAAmBwC,SAAUuB,WCpMtBqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAAS0B,eAAe,SAM1BZ,M","file":"static/js/main.fb3e6ffb.chunk.js","sourcesContent":["export const getFoodPosition = (fieldSize, excludes) => {\n    while (true) {\n        const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n        const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n        // 蛇の体の座標 配列と一致するとこには餌を置かない\n        const conflict = excludes.some(item => item.x === x && item.y === y);\n\n        if (!conflict) {\n            return { x, y };\n        }\n    }\n}\n\n\nexport const initFields = (fieldSize, snake) => {\n    const fields = [];\n    for (let i = 0; i < fieldSize; i++) {\n        const cols = new Array(fieldSize).fill('');\n        fields.push(cols);\n\n    }\n    fields[snake.x][snake.y] = 'snake'\n\n    // テスト(自分を食べる)\n    // fields = fields.map((field, index_row) => field.map((item, index_col) => {\n    //     if ((index_row >= 17 && index_row <= (17 + 15)) && index_col == 17) {\n    //         return 'snake'\n    //     } else {\n    //         return item;\n    //     }\n    // }))\n\n    const food = getFoodPosition(fieldSize, [snake]);\n    fields[food.y][food.x] = 'food';\n\n    return fields;\n}","import { initFields } from '../utils'\n\nexport const fieldSize = 35;\nexport const initialPosition = { x: 17, y: 17 };\nexport const initialValues = initFields(fieldSize, initialPosition);\nexport const defaultInterval = 100;\nexport const defaultDifficulty = 3;\n\nexport const Difficulty = [1000, 500, 100, 50, 10];\n\n// ゲームの状態\nexport const GameStatus = Object.freeze({\n    init: 'init',\n    playing: 'playing',\n    suspended: 'suspended', // 一時停止\n    gameover: 'gameover'\n});\n\n// 蛇の進行方向\nexport const Direction = Object.freeze({\n    up: 'up',\n    right: 'right',\n    left: 'left',\n    down: 'down'\n});\n\n// キーコードと進行方向のマッピング\nexport const DirectionKeyCodeMap = Object.freeze({\n    37: Direction.left,\n    38: Direction.up,\n    39: Direction.right,\n    40: Direction.down\n});\n\n// 反対方向\nexport const OppositeDirection = Object.freeze({\n    up: Direction.down,\n    right: Direction.left,\n    left: Direction.right,\n    down: Direction.up\n});\n\n// 移動方向における座標の変化量\nexport const Delta = Object.freeze({\n    up: { x: 0, y: -1 },\n    right: { x: 1, y: 0 },\n    left: { x: -1, y: 0 },\n    down: { x: 0, y: 1 }\n});","import { defaultDifficulty, Difficulty } from \"../constants\";\n\nconst Navigation = ({ length, difficulty = defaultDifficulty, onChangeDifficulty }) => {\n    const upVisibility = difficulty < Difficulty.length ? '' : 'is-hidden';\n    const downVisibility = difficulty > 1 ? '' : 'is-hidden';\n    const onUpDifficulty = () => onChangeDifficulty(difficulty + 1);\n    const onDownDifficulty = () => onChangeDifficulty(difficulty - 1);\n\n    return (\n        <div className=\"navigation\">\n            <div className=\"navigation-item\">\n                <span className=\"navigation-label\">Length: </span>\n                <div className=\"navigation-item-number-container\">\n                    <div className=\"num-board\">{length}</div>\n                </div>\n            </div>\n            <div className=\"navigation-item\">\n                <span className=\"navigation-label\">Difficulty: </span>\n                <div className=\"navigation-item-number-container\">\n                    <span className=\"num-board\">{difficulty}</span>\n                    <div className=\"difficulty-button-container\">\n                        <div\n                            className={`difficulty-button difficulty-up ${upVisibility}`}\n                            onClick={onUpDifficulty}\n                        ></div>\n                        <div\n                            className={`difficulty-button difficulty-down ${downVisibility}`}\n                            onClick={onDownDifficulty}\n                        ></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Navigation;","const Field = ({ fields }) => {\n    return (\n        <div className=\"field\">\n            {\n                fields.map((row) => {\n                    return row.map((column) => {\n                        return <div className={`dots ${column}`}></div>\n                    })\n                })\n            }\n        </div>\n    );\n};\n\nexport default Field;","import { GameStatus } from \"../constants\";\n\nconst Button = ({ status, onStart, onStop, onRestart }) => {\n    return (\n        <div className=\"button\">\n            {status === GameStatus.gameover && <button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button>}\n            {status === GameStatus.init && <button className=\"btn btn-init\" onClick={onStart}>start</button>}\n            {status === GameStatus.suspended && <button className=\"btn btn-suspended\" onClick={onStart}>start</button>}\n            {status === GameStatus.playing && <button className=\"btn btn-playing\" onClick={onStop}>stop</button>}\n        </div>\n    );\n};\n\nexport default Button;","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faArrowLeft,\n    faArrowUp,\n    faArrowDown,\n    faArrowRight\n} from '@fortawesome/free-solid-svg-icons';\nimport { Direction } from \"../constants\";\n\nconst ManipulationPanel = ({ onChange }) => {\n\n    const onUp = () => onChange(Direction.up);\n    const onRight = () => onChange(Direction.right);\n    const onLeft = () => onChange(Direction.left);\n    const onDown = () => onChange(Direction.down);\n\n    return (\n        <div className=\"manipulation-panel\">\n            <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n            </button>\n            <div>\n                <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n                    <FontAwesomeIcon icon={faArrowUp} />\n                </button>\n                <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n                    <FontAwesomeIcon icon={faArrowDown} />\n                </button>\n            </div>\n            <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n                <FontAwesomeIcon icon={faArrowRight} />\n            </button>\n        </div>\n    );\n};\n\nexport default ManipulationPanel;","import { useCallback, useEffect, useState } from 'react';\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport ManipulationPanel from './components/ManipulationPanel';\nimport {\n  defaultInterval,\n  defaultDifficulty,\n  Delta,\n  Difficulty,\n  Direction,\n  DirectionKeyCodeMap,\n  fieldSize,\n  GameStatus,\n  OppositeDirection,\n  initialPosition,\n  initialValues\n} from './constants';\nimport { initFields, getFoodPosition } from './utils'\n\n// let timer = undefined;\nlet timer = null;\n\nconst unsubscribe = () => {\n  if (!timer) {\n    return\n  }\n  clearInterval(timer);\n}\n\n// 衝突の判定 true:衝突\nconst isCollision = (fieldSize, position) => {\n  if (position.y < 0 || position.x < 0) {\n    return true;\n  }\n\n  if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n\n  return false;\n}\n\n// 自分(蛇)を食べてしまう場合 true:食べてしまう\nconst isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === 'snake';\n}\n\n\nfunction App() {\n  const [fields, setFields] = useState(initialValues);\n  const [body, setBody] = useState([initialPosition]);\n  // // 自分を食べるテスト\n  // const [body, setBody] = useState(\n  //   new Array(15).fill('').map((_item, index) => ({ x: 17, y: 17 + index }))\n  // );\n  const [status, setStatus] = useState(GameStatus.init);\n  const [direction, setDirection] = useState(Direction.up);\n  const [difficulty, setDifficulty] = useState(defaultDifficulty);\n  const [tick, setTick] = useState(0);\n\n  useEffect(() => {\n    // setPosition(initialPosition);\n    // ! SRで追加したところ\n    if (status === GameStatus.init) {\n      return;\n    }\n\n    // ゲームの中の時間を管理する\n    const interval = Difficulty[difficulty - 1];\n    timer = setInterval(() => {\n      // if (!position) { // useEffectの場合の考慮\n      //   return;\n      // }\n      // console.log(position)\n      setTick(tick => tick + 1);\n    }, interval);\n\n    // useEffectのリターンにするとコンポーネントが削除されるタイミングで実行される\n    return unsubscribe;\n  }, [difficulty, status]);\n\n  useEffect(() => {\n    // if (!body.length === 0 || status !== GameStatus.playing) {\n    if (status !== GameStatus.playing) {\n      return;\n    }\n\n    const canContinue = handleMoving();\n    if (!canContinue) {\n      unsubscribe();\n      setStatus(GameStatus.gameover);\n    }\n  }, [tick]);\n\n  const onStart = () => setStatus(GameStatus.playing);\n\n  const onStop = () => setStatus(GameStatus.suspended);\n\n  const onRestart = () => {\n    timer = setInterval(() => {\n      setTick(tick => tick + 1)\n    }, defaultInterval);\n    setDirection(Direction.up);\n    setStatus(GameStatus.init);\n    setBody([initialPosition]);\n    setFields(initFields(fieldSize, initialPosition));\n  }\n\n  // 進行方向の変更\n  const onChangeDirection = useCallback((newDirection) => {\n    // ゲームプレイだけ歩行が変えられる\n    if (status !== GameStatus.playing) {\n      return direction;\n    }\n    // 許容しない移動か（進行方向と真逆の移動とか）\n    if (OppositeDirection[direction] === newDirection) {\n      return;\n    }\n    setDirection(newDirection)\n  }, [direction, status]);\n\n  // 難易度の変更\n  const onChangeDifficulty = useCallback((difficult) => {\n\n    // 初期状態（ゲームを始める前）以外では変更できない \n    if (status !== GameStatus.init) {\n      return;\n    }\n    if (difficult < 1 || difficult > Difficulty.length) {\n      return;\n    }\n    setDifficulty(difficult);\n  }, [status]);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const newDirection = DirectionKeyCodeMap[e.keyCode];\n      if (!newDirection) {\n        return;\n      }\n      onChangeDirection(newDirection);\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [onChangeDirection]);\n\n  // 蛇を動かし、描画する\n  const handleMoving = () => {\n    const { x, y } = body[0];\n    const delta = Delta[direction];\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y\n    };\n\n    // 衝突判定と、自分(蛇)を食べる判定\n    if (isCollision(fields.length, newPosition)\n      || isEatingMyself(fields, newPosition)) {\n      return false;\n    }\n\n    // フィールド配列の再設定\n    const nextFields = fields.map(field => [...field]);\n\n    const newBody = [...body];\n\n    if (fields[newPosition.y][newPosition.x] !== 'food') {\n      // 移動する、次のフィールドが餌でない場合\n      const removingTrack = newBody.pop(); // 最後の要素を取り出し削除\n      nextFields[removingTrack.y][removingTrack.x] = '';\n    } else {\n      // 餌の場合\n      const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n      nextFields[food.y][food.x] = 'food';\n    }\n    nextFields[newPosition.y][newPosition.x] = 'snake';\n    newBody.unshift(newPosition); // 先頭に要素を追加する\n\n    // stateの更新と再レンダリング\n    setBody(newBody);\n    // setFields(fields);\n    setFields(nextFields);\n    return true;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={onChangeDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStop={onStop}\n          onStart={onStart}\n          onRestart={onRestart}\n        />\n        <ManipulationPanel onChange={onChangeDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}